rule WelcomeUser {
	when {
		u: User;
		f: Knowledge f.type === "flags" && isUndefinedOrNull( f.welcome );
	}
	then {
		var message = "<h1>Welcome To Jaby</h1>";
		message += "<h3>what computers were meant to become</h3>";

		logger.info( "Sending welcome message for %s", u.id, {} );
		u.sendMessage( message );

		modify( f, function() {
			f.welcome = true;
		} );
	}
}

rule GetUserName {
	when {
		or (
			u: User isUndefinedOrNull( u.profile.name2 ),
			u: User u.profile.name2 === ""
		);
		not ( q: Knowledge q.id === "user.name2" && q.type === "question" );
	}
	then {
		var message = {
			id: "user.name2",
			question: "What is your name?",
			answers: "user.name2"
		};
		var question = new Knowledge( "question", message );

		logger.info( "Asking user %s for name2.", u.id, {} );
		u.sendMessage( message, "question" );

		assert( question );
	}
}

rule ConfirmUserName {
	when {
		u: User u.profile.name !== "";
		not ( q: Knowledge q.id === "confirm.user.name" && q.type === "question" );
	}
	then {
		var message = {
			id: "confirm.user.name",
			question: "Is " + u.profile.name + " your name?",
			answers: [
				{
					id: "no",
					text: "No"
				},
				{
					id: "yes",
					text: "Yes"
				}
			]
		};
		var question = new Knowledge( "question", message );
		question.asked = true;

		logger.info( "Confirming user %s for name.", u.id, {} );
		u.sendMessage( message, "question" );

		assert( question );
	}
}

rule AskQuestion {
	when {
		u: User;
		q: Knowledge q.type === "question" && isUndefinedOrNull( q.asked );
	}
	then {
		logger.info( "Asking question for %s", u.id, {} );
		logger.debug( "q = %j", q, {} );

		u.sendMessage( q, "question" );

		modify( q, function() {
			q.asked = true;
		} );
	}
}

rule AnswerQuestion {
	when {
		u: User;
		a: Knowledge a.type === "answer" { question: id };
		q: Knowledge q.type === "question" && q.id === id && q.asked === true && isUndefinedOrNull( q.answer );
	}
	then {
		logger.info( "Answered \"%s\" for \"%s\"", a.answer, a.question, {} );
		u.retractMessage( a.question );

		modify( q, function() {
			delete q.answers;
			q.answer = a.answer;
		} );

		retract( a );
	}
}